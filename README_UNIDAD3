# ü§ñ Unidad 3: Los Sistemas Expertos ‚Äî Definici√≥n y Conceptos

---

## üìò Descripci√≥n General

Esta unidad aborda el **n√∫cleo de la Inteligencia Artificial simb√≥lica**: los **Sistemas Expertos (SE)**.  
Un **Sistema Experto** es un programa que utiliza conocimiento especializado y t√©cnicas de inferencia l√≥gica para resolver problemas en un dominio espec√≠fico, imitando el razonamiento de un experto humano.

El proyecto pr√°ctico de esta unidad consiste en **construir un Sistema Experto para diagnosticar por qu√© un autom√≥vil no enciende**, demostrando:

1. La **separaci√≥n entre la base de conocimiento** y el **motor de inferencia**.  
2. El uso de **conocimiento superficial (reglas SI‚ÄìENTONCES)**.  
3. La **capacidad de explicaci√≥n**, caracter√≠stica esencial de los sistemas expertos.

---

## ‚öôÔ∏è Arquitectura del Sistema Experto

Un **Sistema Experto** se compone de tres m√≥dulos principales:

| Componente | Funci√≥n |
|-------------|----------|
| üß† **Base de Conocimiento** | Contiene las reglas, hechos y heur√≠sticas del experto humano. |
| ‚öôÔ∏è **Motor de Inferencia** | Procesa las reglas y deduce conclusiones a partir de los hechos conocidos. |
| üí¨ **M√≥dulo de Explicaci√≥n** | Justifica el razonamiento del sistema, explicando c√≥mo se lleg√≥ a cada diagn√≥stico. |

---

## üß± Paso 1: Base de Conocimiento

La **base de conocimiento** est√° formada por una lista de reglas representadas en diccionarios.  
Cada regla contiene:
- `"nombre"`: identificaci√≥n de la regla.  
- `"si"`: lista de condiciones o hechos requeridos.  
- `"entonces"`: conclusi√≥n deducida cuando se cumplen las condiciones.

```python
base_de_conocimiento_coche = [
    {
        "nombre": "Regla 1: Problema de bater√≠a o motor de arranque",
        "si": ["coche_no_gira_llave"],
        "entonces": "problema_bateria_o_arranque"
    },
    {
        "nombre": "Regla 3: Bater√≠a descargada confirmada",
        "si": ["problema_bateria_o_arranque", "luces_debiles_o_muertas"],
        "entonces": "diagnostico_bateria_descargada"
    },
    ...
]
```
## üßÆ Paso 2: Motor de Inferencia
```
El motor de inferencia aplica un algoritmo de encadenamiento hacia adelante (forward chaining).
Comienza con hechos iniciales y aplica las reglas que se cumplen, agregando nuevas conclusiones hasta que no haya m√°s hechos que deducir.

class SistemaExperto:
    def razonar(self, hechos_iniciales):
        self.hechos = set(hechos_iniciales)
        nuevos_hechos_encontrados = True
        while nuevos_hechos_encontrados:
            nuevos_hechos_encontrados = False
            for regla in self.reglas:
                condiciones = set(regla["si"])
                conclusion = regla["entonces"]
                if condiciones.issubset(self.hechos) and conclusion not in self.hechos:
                    self.hechos.add(conclusion)
                    self.historial_inferencia[conclusion] = regla["nombre"]
```
## Paso 3: M√≥dulo de Explicaci√≥n
```
Una de las caracter√≠sticas m√°s importantes de los Sistemas Expertos es su capacidad para explicar el razonamiento.
El m√©todo explicar_conclusion() describe paso a paso c√≥mo se lleg√≥ a una deducci√≥n:

def explicar_conclusion(self, conclusion):
    regla_que_lo_genero = self.historial_inferencia[conclusion]
    explicacion = f"Se lleg√≥ a '{conclusion}' por la regla '{regla_que_lo_genero}'."
    return explicacion
```
## üöó Ejemplo de Uso
# Hechos iniciales (observaciones del usuario)
hechos_usuario = ["coche_no_gira_llave", "luces_funcionan_bien"]

# Crear sistema experto y ejecutar
sistema = SistemaExperto(base_de_conocimiento_coche)
sistema.razonar(hechos_usuario)

# Diagn√≥stico final
diagnosticos = sistema.obtener_diagnosticos_finales()
print("Diagn√≥sticos finales:", diagnosticos)

# Explicaci√≥n del razonamiento
if diagnosticos:
    print(sistema.explicar_conclusion(diagnosticos[0]))

## üßæ Salida Esperada
=== PROCESO DE RAZONAMIENTO ===

‚úî Hecho a√±adido: problema_bateria_o_arranque (por Regla 1: Problema de bater√≠a o motor de arranque)
‚úî Hecho a√±adido: diagnostico_motor_arranque_defectuoso (por Regla 4: Posible problema del motor de arranque)

=== FIN DEL PROCESO DE RAZONAMIENTO ===

Diagn√≥sticos finales: ['diagnostico_motor_arranque_defectuoso']

=== EXPLICACI√ìN DEL DIAGN√ìSTICO ===
Se lleg√≥ a la conclusi√≥n 'diagnostico_motor_arranque_defectuoso' por la 'Regla 4: Posible problema del motor de arranque'.
Esta regla dice: SI se cumplen las condiciones ['problema_bateria_o_arranque', 'luces_funcionan_bien'], ENTONCES se deduce 'diagnostico_motor_arranque_defectuoso'.

Se lleg√≥ a la conclusi√≥n 'problema_bateria_o_arranque' por la 'Regla 1: Problema de bater√≠a o motor de arranque'.
Esta regla dice: SI se cumplen las condiciones ['coche_no_gira_llave'], ENTONCES se deduce 'problema_bateria_o_arranque'.

La conclusi√≥n 'coche_no_gira_llave' fue un hecho inicial.

## üß† Caracter√≠sticas Demostradas
Caracter√≠stica	Descripci√≥n
Competencia de Experto	El sistema emite diagn√≥sticos similares a los de un mec√°nico.
Separaci√≥n del Conocimiento y el Motor	La base de reglas puede modificarse sin alterar el motor l√≥gico.
Capacidad de Explicaci√≥n	Explica c√≥mo se lleg√≥ a cada conclusi√≥n paso a paso.
Manejo de Conocimiento Superficial	Utiliza reglas simples basadas en experiencia pr√°ctica.
## üß© Beneficios del Sistema Experto

Permite automatizar el razonamiento experto en dominios espec√≠ficos.

Facilita el mantenimiento del conocimiento, separando datos y l√≥gica.

Puede explicar sus decisiones, generando confianza en el usuario.

Es extensible, basta con agregar nuevas reglas para cubrir m√°s casos.

## üß≠ Conclusi√≥n

La construcci√≥n de un Sistema Experto demuestra c√≥mo la Inteligencia Artificial simb√≥lica puede reproducir el pensamiento humano a trav√©s de reglas l√≥gicas.
En este proyecto se comprob√≥ que:

La base de conocimiento encapsula la experiencia del experto humano.

El motor de inferencia puede razonar y deducir conclusiones de manera autom√°tica.

El m√≥dulo de explicaci√≥n otorga transparencia al razonamiento del sistema.