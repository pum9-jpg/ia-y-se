# -*- coding: utf-8 -*-
"""reconocimiento_rostros

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GkJtOpxhbnEieQSXXVL7uhAlrEcDaKOb
"""

# reconocimiento_rostros.py
import cv2
import face_recognition
import os
import numpy as np

def cargar_rostros(directorio):
    """Carga im√°genes de rostros conocidos desde un directorio y obtiene sus codificaciones."""
    rostros_codificados = []
    nombres = []

    for archivo in os.listdir(directorio):
        if archivo.endswith(('.jpg', '.jpeg', '.png')):
            ruta = os.path.join(directorio, archivo)
            imagen = face_recognition.load_image_file(ruta)
            codificaciones = face_recognition.face_encodings(imagen)
            if codificaciones:
                rostros_codificados.append(codificaciones[0])
                nombres.append(os.path.splitext(archivo)[0])
                print(f"‚úÖ Rostro cargado: {archivo}")
            else:
                print(f"‚ö†Ô∏è No se detect√≥ ning√∫n rostro en {archivo}")

    return rostros_codificados, nombres


def reconocer_en_video(rostros_codificados, nombres):
    """Detecta y reconoce rostros en tiempo real usando la c√°mara web."""
    video = cv2.VideoCapture(0)

    if not video.isOpened():
        print("‚ùå No se puede acceder a la c√°mara.")
        return

    print("üé• Reconocimiento facial iniciado. Presiona 'q' para salir.")

    while True:
        ret, frame = video.read()
        if not ret:
            print("Error al capturar el video.")
            break

        # Redimensionar para acelerar el procesamiento
        imagen_reducida = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)
        rgb_reducida = cv2.cvtColor(imagen_reducida, cv2.COLOR_BGR2RGB)

        # Detecci√≥n y codificaci√≥n de rostros
        ubicaciones = face_recognition.face_locations(rgb_reducida)
        codificaciones = face_recognition.face_encodings(rgb_reducida, ubicaciones)

        for codificacion, ubicacion in zip(codificaciones, ubicaciones):
            coincidencias = face_recognition.compare_faces(rostros_codificados, codificacion)
            distancias = face_recognition.face_distance(rostros_codificados, codificacion)
            indice_mejor = np.argmin(distancias)

            nombre = "Desconocido"
            if coincidencias[indice_mejor]:
                nombre = nombres[indice_mejor]

            # Escalar coordenadas a la imagen original
            top, right, bottom, left = [v * 4 for v in ubicacion]
            cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 0), 2)
            cv2.rectangle(frame, (left, bottom - 30), (right, bottom), (0, 255, 0), cv2.FILLED)
            cv2.putText(frame, nombre, (left + 5, bottom - 8), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 0), 2)

        cv2.imshow("Reconocimiento Facial", frame)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    video.release()
    cv2.destroyAllWindows()


if __name__ == "__main__":
    # Carpeta que contiene las im√°genes de entrenamiento
    directorio = "rostros_conocidos"

    if not os.path.exists(directorio):
        os.makedirs(directorio)
        print("‚ö†Ô∏è No se encontraron rostros. Crea una carpeta llamada 'rostros_conocidos' y agrega im√°genes de referencia.")
    else:
        rostros_codificados, nombres = cargar_rostros(directorio)
        if rostros_codificados:
            reconocer_en_video(rostros_codificados, nombres)
        else:
            print("‚ö†Ô∏è No hay rostros v√°lidos para reconocer.")