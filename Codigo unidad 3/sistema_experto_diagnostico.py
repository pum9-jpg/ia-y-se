# -*- coding: utf-8 -*-
"""sistema_experto_diagnostico

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19wPffUlDhorXmwTkXGPdiNekUh7NoCfz
"""

"""sistema_experto_diagnostico.py
Proyecto práctico — Unidad 3: Los Sistemas Expertos, Definición y Conceptos
"""

class SistemaExperto:
    def __init__(self, reglas):
        # Separación entre conocimiento y motor de inferencia
        self.reglas = reglas
        self.hechos = set()
        self.historial_inferencia = {}

    def razonar(self, hechos_iniciales):
        """Motor de inferencia: encadenamiento hacia adelante"""
        self.hechos = set(hechos_iniciales)
        nuevos_hechos = True
        print("\n- Proceso de Razonamiento -")
        while nuevos_hechos:
            nuevos_hechos = False
            for regla in self.reglas:
                condiciones = set(regla["si"])
                conclusion = regla["entonces"]
                if condiciones.issubset(self.hechos) and conclusion not in self.hechos:
                    self.hechos.add(conclusion)
                    self.historial_inferencia[conclusion] = regla["nombre"]
                    print(f"Hecho añadido: '{conclusion}' (Regla aplicada: '{regla['nombre']}')")
                    nuevos_hechos = True
        print("- Fin del Proceso de Razonamiento -")
        return self.hechos

    def obtener_diagnosticos_finales(self):
        """Devuelve los hechos que son diagnósticos finales."""
        return [hecho for hecho in self.hechos if hecho.startswith("diagnostico_")]

    def explicar_conclusion(self, conclusion):
        """Explica cómo se llegó a una conclusión."""
        if conclusion not in self.historial_inferencia:
            if conclusion in self.hechos:
                return f"La conclusión '{conclusion}' fue un hecho inicial.\n"
            return f"No se pudo determinar cómo se llegó a la conclusión '{conclusion}'.\n"

        regla_nombre = self.historial_inferencia[conclusion]
        regla = next((r for r in self.reglas if r["nombre"] == regla_nombre), None)
        condiciones = regla["si"] if regla else []
        explicacion = f"\nConclusión '{conclusion}' derivada por '{regla_nombre}'.\n"
        explicacion += f"Condiciones necesarias: {condiciones}\n"
        for condicion in condiciones:
            explicacion += self.explicar_conclusion(condicion)
        return explicacion


# Base de conocimiento (reglas superficiales)
base_de_conocimiento_coche = [
    {"nombre": "Regla 1: Problema de batería o motor de arranque",
     "si": ["coche_no_gira_llave"], "entonces": "problema_bateria_o_arranque"},
    {"nombre": "Regla 2: Problema de combustible o encendido",
     "si": ["coche_gira_pero_no_enciende"], "entonces": "problema_combustible_o_encendido"},
    {"nombre": "Regla 3: Batería descargada confirmada",
     "si": ["problema_bateria_o_arranque", "luces_debiles_o_muertas"], "entonces": "diagnostico_bateria_descargada"},
    {"nombre": "Regla 4: Posible problema del motor de arranque",
     "si": ["problema_bateria_o_arranque", "luces_funcionan_bien"], "entonces": "diagnostico_motor_arranque_defectuoso"},
    {"nombre": "Regla 5: Posible problema de combustible",
     "si": ["problema_combustible_o_encendido", "huele_a_gasolina"], "entonces": "diagnostico_sistema_combustible"},
    {"nombre": "Regla 6: Posible problema de encendido",
     "si": ["problema_combustible_o_encendido", "no_huele_a_gasolina"], "entonces": "diagnostico_sistema_encendido"}
]


def main():
    print("\n- INICIANDO DIAGNÓSTICO DEL VEHÍCULO -")
    entrada = input("Ingrese síntomas separados por coma: ").strip()
    hechos_iniciales = [h.strip() for h in entrada.split(",") if h.strip()]
    if not hechos_iniciales:
        hechos_iniciales = ["coche_no_gira_llave", "luces_debiles_o_muertas"]
        print(f"Usando síntomas por defecto: {hechos_iniciales}")

    se = SistemaExperto(base_de_conocimiento_coche)
    se.razonar(hechos_iniciales)
    diagnosticos = se.obtener_diagnosticos_finales()
    print(f"\nHechos finales: {se.hechos}")
    print(f"Diagnósticos finales: {diagnosticos}\n")

    if diagnosticos:
        print("- EXPLICACIÓN DEL DIAGNÓSTICO -")
        for d in diagnosticos:
            print(se.explicar_conclusion(d))


if __name__ == "__main__":
    main()