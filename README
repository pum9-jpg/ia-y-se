# üö≤ Sistema Experto para Diagn√≥stico de Bicicletas  
*Un mini-proyecto did√°ctico que compara dos formas cl√°sicas de representar conocimiento: Reglas de Producci√≥n vs. Marcos (Frames).*

---

##  ¬øQu√© incluye?
| Archivo | Descripci√≥n |
|---------|-------------|
| `reglas_produccion.py` | Motor que diagnostica y sugiere soluciones mediante **reglas IF-THEN**. |
| `frames.py` | Misma tarea pero representando los problemas como **objetos con atributos (frames)**. |

Ambos archivos son independientes y se pueden ejecutar por separado.

---

##  C√≥mo ejecutar en 30 segundos
1. Clona o descarga la carpeta del proyecto.  
2. Entra en la carpeta del proyecto:
   ```bash
   cd diagnostico_bicicletas

   Opci√≥n A ‚Äì Reglas de Producci√≥n:
bash
Copy
python reglas_produccion.py
Salida ejemplo:
Copy
- Usando Reglas de Producci√≥n -
Diagn√≥stico encontrado: diagnostico_cadena_desgastada
Soluci√≥n encontrada: solucion_reemplazar_cadena
Opci√≥n B ‚Äì Marcos (Frames):
bash
Copy
python frames.py
Salida ejemplo:
Copy
- Usando Marcos (Frames) -
Problema identificado: cadena_desgastada
  ‚ûî Es un tipo de: problema_de_transmision
  ‚ûî La soluci√≥n es: reemplazar_cadena
  ‚ûî Necesitar√°s: cortacadenas, cadena_nueva
No necesitas instalar dependencias externas; solo Python ‚â• 3.7.
    
    Comparaci√≥n r√°pida de enfoques
Table
Copy
Aspecto	Reglas de Producci√≥n	Marcos (Frames)
Estilo	L√≥gica IF-THEN	Orientado a objetos
Extensibilidad	A√±adir nueva regla al diccionario	A√±adir nuevo frame
Lectura	Muy intuitiva para procesos paso a paso	Natural para describir "cosas"
Consultas complejas	Requiere m√°s c√≥digo	F√°cil acceso a slots (atributos)


Ejemplo de pregunta	¬øQu√© diagn√≥stico/soluci√≥n tengo?	¬øQu√© herramientas necesito? ¬øDe qu√© tipo es el problema?
üìù Conclusi√≥n personal
Ambas representaciones tienen el mismo poder expresivo ante problemas sencillos, pero escalan de forma distinta:
Reglas brillan cuando el conocimiento es procedural (pasos, flujos, decisiones lineales).
Frames ganan cuando importa la estructura de los objetos: atributos, relaciones, herencia, b√∫squedas flexiles.
En la pr√°ctica los sistemas reales mezclan ambas: reglas para razonar y frames para organizar la informaci√≥n.
Este peque√±o proyecto demuestra que, con unas pocas l√≠neas de Python, puedes implementar y comparar ambos paradigmas sin librer√≠as externas y entender de primera mano por qu√© la elecci√≥n de representaci√≥n importa.